{"version":3,"sources":["components/scans/components/common/Search.js","components/scans/components/scan/ScanList.js","components/scans/components/scan/Scan.js","components/scans/containers/Scan.js","managers/AuthService.js"],"names":["moment","locale","registerLocale","th","Search","props","useState","startDate","setStartDate","endDate","setEndDate","handleSubmit","e","preventDefault","isGood","formIsValidSearch","console","log","confirm","format","onConfirmClick","className","onSubmit","htmlFor","isClearable","dateFormat","selected","onChange","date","placeholderText","type","ScanList","formatNumber","num","parseInt","toLocaleString","iscount","isdata","data","map","rs","lengtd","isCheckData","style","width","key","member_no","member_name","member_money","member_sell","member_stock","member_buy","member_paid","verticalAlign","colSpan","Scan","Auth","AuthService","useEffect","loggedIn","window","location","replace","marginTop","msg","date_start","date_end","this","getToken","jwt","sign","localStorage","setItem","getItem","decode"],"mappings":"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","file":"static/js/12.7c584d38.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n// import classNames from \"classnames\";\n\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport { registerLocale } from \"react-datepicker\";\n\n/**\n * Style\n */\nimport \"react-datepicker/dist/react-datepicker.css\";\n//import moment from \"moment\";\nimport th from \"date-fns/locale/th\";\nimport \"moment/locale/th.js\";\nmoment.locale(\"th\");\nregisterLocale(\"th\", th);\n\nfunction Search(props) {\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n\n  // handle confirm on props with record component\n  const onConfirmClick = () => {\n    if (props.confirm) {\n      const msg = \"SearchList\";\n      props.confirm(\n        msg,\n        moment(startDate).format(\"YYYY-MM-DD\"),\n        moment(endDate).format(\"YYYY-MM-DD\")\n      );\n    } else {\n      props.confirm(\"\");\n    }\n  };\n  // handle from validate\n  const formIsValidSearch = () => {\n    let isGood = true;\n    if (startDate === \"\" || startDate === null) {\n      isGood = false;\n    }\n    if (endDate === \"\" || endDate === null) {\n      isGood = false;\n    }\n    if (!isGood) {\n      // setData({\n      //   ...data\n      // });\n    }\n    return isGood;\n  };\n  // handle onclick submit\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (formIsValidSearch()) {\n      console.log(startDate, endDate);\n      onConfirmClick();\n    }\n  };\n  return (\n    <div className=\"card-header\">\n      <div className=\"row\">\n        <div className=\"col-md-12 col-12\">\n          <form onSubmit={(e) => handleSubmit(e)}>\n            <div className=\"row\">\n              <div className=\"col-md-5 col-12\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"InputMember\" className=\"col-form-label\">\n                    {\" \"}\n                    วันที่เริ่มต้น\n                  </label>\n                  {/* <DatePicker\n                    locale=\"th\"\n                    className=\"form-control\"\n                    selected={data.start.value}\n                    onChange={(e) =>\n                      setData({\n                        ...data,\n                        start: {\n                          value: moment(e).toDate(),\n                          isValid: true\n                        }\n                      })\n                    } // เฉพาะเมื่อค่ามีการเปลี่ยนแปลง\n                    dateFormat=\"dd LLLL yyyy\"\n                    placeholderText=\"กรุณาเลือกวันที่\"\n                    //isClearable\n                    isClearable={data.start.value !== \"\" ? true : false}\n                  /> */}\n\n                  <DatePicker\n                    locale=\"th\"\n                    className=\"form-control\"\n                    isClearable={startDate !== \"\" ? true : false}\n                    dateFormat=\"dd LLLL yyyy\"\n                    selected={startDate}\n                    onChange={(date) => setStartDate(date)}\n                    placeholderText=\"กรุณาเลือกวันที่เริ่มต้น\"\n                  />\n                </div>\n              </div>\n              <div className=\"col-md-5 col-12\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"InputMemberName\" className=\"col-form-label\">\n                    {\" \"}\n                    วันที่สิ้นสุด\n                  </label>\n                  <DatePicker\n                    locale=\"th\"\n                    className=\"form-control\"\n                    isClearable={endDate !== \"\" ? true : false}\n                    dateFormat=\"dd LLLL yyyy\"\n                    selected={endDate}\n                    onChange={(date) => setEndDate(date)}\n                    placeholderText=\"กรุณาเลือกวันที่สิ้นสุด\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"col-md-2 col-12\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"InputMember\" className=\"col-form-label\">\n                    &nbsp;\n                  </label>\n\n                  <button\n                    // style={{ marginTop: 15 }}\n                    type=\"submit\"\n                    className=\"btn btn-default btn-block\"\n                  >\n                    <i className=\"fa fa-search\" /> ค้นหา\n                  </button>\n                </div>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\n\nconst ScanList = (props) => {\n  function formatNumber(num) {\n    const parseNumber = parseInt(num);\n    const toLocale = parseNumber.toLocaleString();\n    return toLocale;\n  }\n  function isCheckData() {\n    let iscount;\n    var isdata = [];\n    props.data.map((rs) => {\n      if (rs.lengtd === 0) {\n        iscount = false;\n        return iscount;\n      } else {\n        iscount = true;\n        isdata = rs;\n        return { iscount, isdata };\n      }\n    });\n    return { iscount, isdata };\n  }\n\n  const { iscount, isdata } = isCheckData();\n  return (\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <table className=\"table table-bordered table-responsive p-0\">\n          <thead>\n            <tr>\n              <td style={{ width: \"5%\" }}>ลำดับ</td>\n              <td style={{ width: \"20%\" }}>วันที่</td>\n              <td style={{ width: \"15%\" }}>เวลา</td>\n              <td style={{ width: \"10%\" }}>สถานที่</td>\n              <td style={{ width: \"10%\" }}>สถานะ</td>\n            </tr>\n          </thead>\n          <tbody>\n            {iscount ? (\n              <tr key=\"isdata\">\n                <td>{isdata.member_no}</td>\n                <td>{isdata.member_name}</td>\n                <td>{formatNumber(isdata.member_money)}</td>\n                <td>{formatNumber(isdata.member_sell)}</td>\n                <td>{formatNumber(isdata.member_stock)}</td>\n                <td>{formatNumber(isdata.member_buy)}</td>\n                <td>{formatNumber(isdata.member_paid)}</td>\n              </tr>\n            ) : (\n              <tr key=\"emtpydata\">\n                <td\n                  style={{ verticalAlign: \"middle\" }}\n                  colSpan=\"7\"\n                  className=\"text-center\"\n                >\n                  {/* {(page - 1) * 20 + index + 1} */}\n                  --- ไม่มีข้อมูล ---\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default ScanList;\n","import React, { useEffect } from \"react\";\nimport SearchMember from \"../common/Search\";\nimport ScanList from \"./ScanList\";\n\nimport AuthService from \"../../../../managers/AuthService\";\nfunction Scan() {\n  const Auth = new AuthService(\"http://localhost:3000/\");\n  // const [data, setData] = useState([]);\n  const data = [];\n  // Confirm From Search\n  const onConfirm = (msg, date_start, date_end) => {\n    if (msg === \"SearchList\") {\n      console.log(date_start, date_end);\n    }\n  };\n\n  useEffect(() => {\n    if (!Auth.loggedIn()) {\n      window.location.replace(\"/#/scan/member-register\");\n    }\n  }, [Auth]);\n\n  return (\n    <section className=\"content\" style={{ marginTop: -16 }}>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"card\">\n              <SearchMember confirm={onConfirm} />\n              <div className=\"card-body\">\n                <ScanList data={data} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default Scan;\n","import React from \"react\";\nimport ScanComponent from \"../components/scan/Scan\";\n\nfunction Scan() {\n  return (\n    <div>\n      <ScanComponent />\n    </div>\n  );\n}\n\nexport default Scan;\n","import decode from \"jwt-decode\";\nimport sign from \"jwt-encode\";\n\nexport default class AuthService {\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // GEtting token from localstorage\n    return !!token; // handwaiving here\n  }\n\n  setToken(data) {\n    const secret = \"secret\";\n    const jwt = sign(data, secret);\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", jwt);\n  }\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  }\n  getProfile() {\n    // Using jwt-decode npm package to decode the token\n    return decode(this.getToken());\n  }\n}\n"],"sourceRoot":""}